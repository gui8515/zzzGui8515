//   Author: iLikeGothMommys
// CONTRACT: FIRST CONTRACT
CONTRACT_TYPE
{
    name = Tourism_Moons1Landing
    group = MoonLanding
	sortKey = 01.MoonLanding1
    genericTitle = Land a tourist on the surface of one of the moons of @/homeWorldPlanet
    genericDescription = Land one tourist on one of the moons of @/homeWorldPlanet and return them home safely

    title = Land @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists onto the surface of @targetBody.
    description = A very brave and very wealthy kerbal wants to take a closer look of @targetBody. They are proposing we land them on the surface and let them stay for a few days.  
    synopsis = Ferry one tourist to the surface of @targetBody and leave them for a few days, then return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Significant

    targetBody = @parentBody.Children().Random()

    // Contract rewards
    rewardFunds = 5000 + Random(4000.0, 9000.0)
    rewardReputation = 11.0
    failureReputation = 12.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(2556, 4260)
	
	
	
	//Early Game Rewards
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				invertRequirement = true
				targetBody = Sun()
				checkType = MANNED
			}
		}
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = Land on @/targetBody
			
      
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = ReachState
				type = ReachState
				situation = LANDED
				hidden = true
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal

			completeInSequence = true
			rewardFunds = 40000 + Random(4000.0, 6000.0)
		}
	}
	
	
	
	//Late Game rewards
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
		
		REQUIREMENT 
		{
			name = All
			type = All
		
			REQUIREMENT
			{
				name = ReturnFromOrbit
				type = ReturnFromOrbit
				targetBody = Sun()
				checkType = MANNED
			}
		}
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = Land on @/targetBody
			
			
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = ReachState
				type = ReachState
				situation = LANDED
				hidden = true
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal

			completeInSequence = true
			rewardFunds = 24500 + Random(1000.0, 2000.0)
		}
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:prefixes.Random() + @TourismOverhaul:suffixes.Random() + " Kerman")
		hidden = true
	}
	
	DATA
    {
        type = CelestialBody
		hidden = true
        parentBody = HomeWorld().Parent().IsPlanet() ? HomeWorld().Parent() : HomeWorld()
    }
	DATA 
	{
		type = CelestialBody
		hidden = true
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(1d, 4d)
	}
	

    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }
	
	REQUIREMENT
    {
        name = All
        type = All
        hideChildren = false

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Must have at least 80 reputation
            minReputation = 80
        }
		REQUIREMENT
		{
			name = ReturnFromSurface
			type = ReturnFromSurface
			checkType = MANNED
			title = Must have returned from the surface of @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 1
			title = Must have one tourist who is willing to book a tour with our agency
		}
	}
}