//   Author: iLikeGothMommys
// CONTRACT: SECOND CONTRACT
CONTRACT_TYPE
{
    name = TourismOverhaul_LowOrbit2Tourists
    group = LowOrbit
	sortKey = 02.LowOrbit2
    genericTitle = Ferry two tourists to low @targetBody orbit
    genericDescription = Bring two tourists to orbit and back (safely).

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to low @targetBody orbit
    description = A group of @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists approached us, they want to go to space. We agreed that we could potentially ferry them up to orbit around @targetBody. What do you think?
    synopsis = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to orbit of @targetBody orbit for one hour.
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Trivial

    targetBody = HomeWorld()

    // Contract rewards
	advanceFunds = 750 + (2000 * @TourismOverhaul:touristCount) + Random(400.0, 900.0)
    rewardReputation = 11.0
    failureReputation = 22.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(2556, 4260)
   
   
   	PARAMETER
	{
		name = All
		type = All
		title = Complete all of the tourist's travel itineraries
		
	REQUIREMENT 
	{
		name = All
		type = All
		
		REQUIREMENT
		{
			name = TechResearched
			type = TechResearched
			invertRequirement = true
			tech = highPerformanceFuelSystems
		}
		REQUIREMENT
		{
			name = TechResearched
			type = TechResearched
			invertRequirement = true
			tech = veryHeavyRocketry
		}
	}
   

	PARAMETER 
	{ 
		name = DoubleTourist1
		type = All 
		title = Complete @/randomKerbalName1 travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup

			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}
			
			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = false
				minPeA = @/targetBody.AtmosphereAltitude() + 100
			}
		}
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName1
			completeInSequence = true
			rewardFunds = 7500 + (25000) + Random(4000.0, 9000.0)
		}
	}
	// END OF FIRST FLYBY WITH DOUBLE TOURIST
	
	// START OF SECOND FLYBY WITH SECOND TOURIST
	
	PARAMETER
	{
		name = DoubleTourist2
		type = All 	
		title = Complete @/randomKerbalName2 travel itinerary
		
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = Orbit @/targetBody
				PARAMETER
				{
					name = HasPassengers2
					type = HasPassengers
					kerbal = @/randomKerbalName2
					hideChildren = true
					hidden = true
				}

				PARAMETER
				{
					name = Orbit
					type = Orbit
					title = Orbit @/targetBody
					minPeA = @/targetBody.AtmosphereAltitude() + 100
					hideChildren = true
					hidden = true
				}
		}
	
	    PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName2
			completeInSequence = true
			rewardFunds = 7500 + (25000) + Random(4000.0, 9000.0)
		}
	}
}
	
	
		
		
	//LATE GAME REWARD	
	PARAMETER
	{
		name = All
		type = All
		title = Complete all of the tourist's travel itineraries
		
	REQUIREMENT 
	{
		name = All
		type = All
		
		REQUIREMENT
		{
			name = TechResearched
			type = TechResearched
			tech = highPerformanceFuelSystems
		}
		REQUIREMENT
		{
			name = TechResearched
			type = TechResearched
			tech = veryHeavyRocketry
		}
	}
   

	PARAMETER 
	{ 
		name = DoubleTourist1
		type = All 
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = Orbit @/targetBody
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Orbit @/targetBody
				hideChildren = true
				hidden = true
				minPeA = @/targetBody.AtmosphereAltitude() + 100
        }
	}
		
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName1
			completeInSequence = true
			rewardFunds = 7500 + (18500) + Random(4000.0, 9000.0)
		}
	}
	// END OF FIRST FLYBY WITH DOUBLE TOURIST
	
	// START OF SECOND FLYBY WITH SECOND TOURIST
	
	PARAMETER
	{
		name = DoubleTourist2
		type = All 	
		title = Complete @/randomKerbalName2's travel itinerary
		
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = Orbit @/targetBody
				PARAMETER
				{
					name = HasPassengers2
					type = HasPassengers
					kerbal = @/randomKerbalName2
					hidden = true
					hideChildren = true
				}

				PARAMETER
				{
					name = Orbit
					type = Orbit
					title = Orbit @/targetBody
					hideChildren = true
					hidden = true
					minPeA = @/targetBody.AtmosphereAltitude() + 100
				}
		}
	
	    PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/randomKerbalName2
			completeInSequence = true
			rewardFunds = 7500 + (18500) + Random(4000.0, 9000.0)
		}
	}
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:prefixes.Random() + @TourismOverhaul:suffixes.Random() + " Kerman")
		hidden = true
	}
	DATA
	{
		type = Kerbal
		title = randomly generates name for second tourist
		randomKerbalName2 = NewKerbal(Random(), @TourismOverhaul:prefixes.Random() + @TourismOverhaul:suffixes.Random() + " Kerman")
		hidden = true
	}
	

    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }
	
	    BEHAVIOUR
    {
        name = SpawnPassengers2
        type = SpawnPassengers

		kerbal = @/randomKerbalName2
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

    REQUIREMENT
    {
        name = All
        type = All

        hideChildren = false

        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Must have at-least 80 reputation
            minReputation = 80
        }
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 2
			title = Must have two tourists who are willing to book a tour with our agency
		}
		REQUIREMENT
        {
			name = ReturnFromOrbit
			type = ReturnFromOrbit
			checkType = MANNED
			title = Must have returned from orbit of @/targetBody
            targetBody = HomeWorld()
        }
    }
}