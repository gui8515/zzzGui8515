//   Author: iLikeGothMommys
//	Contract: First Contract
CONTRACT_TYPE
{
    name = Tourism_InterplanetaryLanding1Tourist
    group = InterplanetaryLanding
	sortKey = 01.InterplanetaryLanding1	
	
    genericTitle = Ferry one tourist to another planet
    genericDescription = Ferry one tourist to another planet and bring them back safely.

    title = Ferry @TourismOverhaul:touristCount.Print() @TourismOverhaul:tourists to @targetBody
    description = @/interplanetaryMessagesNoLandingSingleTourst.Random()
    synopsis = Ferry one tourist to the surface of @targetBody and return them safely to @/homeWorldPlanet
    completedMessage = The @TourismOverhaul:tourists had a great time!

    // Level 1 prestige
    prestige = Exceptional
    targetBody = ReturnedFromBodies().Where(b => !b.IsSun() && b.HasSurface() && !b.IsHomeWorld() && b.Parent() != HomeWorld() && (b.Parent() == HomeWorld().Parent() || b.Parent().Parent() == HomeWorld().Parent()) && b.Name() != "WH3141A" && b.Parent().SemiMajorAxis() < 2845252514114).Random()

    // Contract rewards
    rewardFunds = 2000 + Random(0.0, 3000.0)
    rewardReputation = 8.0
    failureReputation = 9.0
	
	// Quickly Expire & Deadline
	minExpiry = 6.0
	maxExpiry = 25.0	
	deadline = Random(9372, 12780)
	
	PARAMETER
	{
		name = All
		type = All
		title = Complete @/randomKerbalName1's travel itinerary
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			
			title = Land on @/targetBody
			PARAMETER
			{
				name = HasPassengers1
				type = HasPassengers
				kerbal = @/randomKerbalName1
				hideChildren = true
				hidden = true
			}

			PARAMETER
			{
				name = ReachState
				type = ReachState
				title = Land on @/targetBody
				hideChildren = true
				hidden = true
				situation = LANDED
			}
		}	
	
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal

			completeInSequence = true
			rewardFunds = 49000 + Random(4000.0, 6000.0)
		}
	}
	
	DATA
	{
		type = List<string>
		title = list of potential interplanetary messages for contracts that do not require landing.
		interplanetaryMessagesNoLandingSingleTourst = [ "A space tourism enthusiast has expressed a keen interest in experiencing the awe-inspiring beauty of @/targetBody. We need you to ferry this tourist to @targetBody and safely return them to @/homeWorldPlanet.", "A private tourist has booked a once-in-a-lifetime opportunity to vist @/targetBody. They are seeking a reliable spaceflight provider to make this dream a reality. That is where we come in.", "A thrill-seeking tourist has requested a a trip to @targetBody. They are eager to witness its beauty from space and experience the unique environment of orbital flight.", "A tourist with a thirst for adventure has requested an unforgettable journey to visit @/targetBody. They want to experience the beauty of @/targetBody firsthand and return safely to @/homeWorldPlanet to share their story. It's a bold request, but that's where we come in.", "An adventurous tourist has decided that life on @/homeWorldPlanet just isn’t exciting enough and wants to take a scenic trip to vist @/targetBody. They’re hoping for breathtaking views, a few zero-gravity snacks, and a smooth ride back home to brag about it.", "A tourist has decided that looking up at @/targetBody from @/homeWorldPlanet just isn’t good enough—they want to see it up close! Their dream is to visit the planet, enjoy the cosmic sights, and then return home safely with tales of their adventure.", "A tourist reached out to us asking for a trip to visit @/targetBody and a safe return to @/homeWorldPlanet. This journey will provide a unique orbital experience and showcase the capabilities of your space program." ]
		hidden = true
	}
	
	DATA
	{
		type = Kerbal
		title = randomly generates name for first tourist
		randomKerbalName1 = NewKerbal(Random(), @TourismOverhaul:prefixes.Random() + @TourismOverhaul:suffixes.Random() + " Kerman")
		hidden = true
	}
	DATA 
	{
		type = CelestialBody
		hidden = true
		homeWorldPlanet = HomeWorld()
	}
	DATA 
	{
		type = Duration 
		title = Duration Time generator
		hidden = true 
		durationTime = Random(7d, 14d)
	}
	
    BEHAVIOUR
    {
        name = SpawnPassengers1
        type = SpawnPassengers
		kerbal = @/randomKerbalName1
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @TourismOverhaul:touristCount
            TouristLowOrbitCount = TouristLowOrbitCount + @TourismOverhaul:touristCount
        }
    }

	REQUIREMENT
	{
		type = All
		name = All
		hideChildren = false
		
        REQUIREMENT
        {
            name = Reputation
            type = Reputation
			title = Reputation
            minReputation = 200
			title = Must have at least 200 reputation
        }
		REQUIREMENT 
		{
			name = Landing
			type = Landing
			checkType = MANNED
			title = Perform a manned landing on @/targetBody
			targetBody = @/targetBody
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @TourismOverhaul:touristCount == 1
			title = Must have one tourist who is willing to book a tour with our agency
		}
	}
}