// Requires version 1.9.3

CONTRACT_TYPE
{
	name = RoverDeploy
	title = Rover Deployment
	group = RoverMissionsGroup
	agent = Space Penguins, Inc

	genericDescription = Deploy a rover

	description = Much of @/targetBody is a mystery to us still.  We could learn a lot by deploying a new rover there.
	notes = Launch a new rover to @/targetBody.  Include all the scientific instrumentation you can!
	synopsis = Launch a new rover to @/targetBody
	completedMessage = The rover is on location and ready for research!
	deadline = 10000
	targetBody = @/planet
	maxSimultaneous = 1
	rewardReputation = 2
	rewardFunds = 10000
	failureReputation = 4
	failureFunds = 20000
	advanceFunds = 10000

	BEHAVIOUR
	{
		name = Expression
		type = Expression

		CONTRACT_COMPLETED_SUCCESS
		{
			type = bool
			RC_roverDeployed = true
		}
	}

//	BEHAVIOUR:NEEDS[UnmannedContracts]
//	{
//		name = DialogBox
//		type = DialogBox
//
//		DIALOG_BOX
//		{
//			title = test dialog box
//			condition = CONTRACT_ACCEPTED
//			TEXT
//			{
//				text = Unmanned Contracts detected
//			}
//		}
//	}

	DATA
	{
		type = CelestialBody
		hidden = true
		planet = Prestige() == Trivial ? @/easyPlanets.Random() : Prestige() == Significant ? @/mediumPlanets.Random() : @/hardPlanets.Random()
	}	

	DATA
	{
		type = CelestialBody
		hidden = true

		kerbin = Kerbin
		mun = Mun
		minmus = Minmus
		duna = Duna
	}
	
	DATA
	{
		type = bool

		moonsReached = @mun.HaveReached() || @minmus.HaveReached()
		dunaReached = @duna.HaveReached()
	}

	DATA
	{
		type = List<CelestialBody>
		hidden = true
		requiredValue = false

		// Make sure first rover is deployed to Kerbin
		easyPlanets = bool($RC_roverDeployed)  ? HomeWorld().Children() : [ @kerbin ]

		// First line:  get planets depending on orbited or not
		// Second line: get planets depending on if any rovers or not
		mediumPlanets1 =  OrbitedBodies().Where(b => b.HasSurface()).ExcludeAll(@easyPlanets).Exclude(HomeWorld())
		mediumPlanets2 =  @dunaReached ? @mediumPlanets1 : @easyPlanets
		mediumPlanets3 = @mediumPlanets2.Count() > 0 ? @mediumPlanets2 : [@kerbin]
		mediumPlanets =  bool($RC_roverDeployed)  ? @mediumPlanets3 : [ @kerbin ]

		hardPlanetsTemp =  @dunaReached  ?AllBodies().Where(b => b.HasSurface()).ExcludeAll(@easyPlanets) : [ @kerbin ]
		hardPlanetsTemp1 = @hardPlanetsTemp.Count() > 0 ? @hardPlanetsTemp : [ @kerbin ]
		hardPlanetsTemp2 = @dunaReached ?  @hardPlanetsTemp1.ExcludeAll(@mediumPlanets).Exclude(HomeWorld()) : @mediumPlanets
		hardPlanetsTemp3 = @hardPlanetsTemp2.Count() > 0 ? @hardPlanetsTemp2 : @mediumPlanets
		hardPlanets =  bool($RC_roverDeployed) ? @hardPlanetsTemp3 : [ @kerbin ]

	}

	REQUIREMENT
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked
		partModuleType = Antenna
		partModuleType = Wheel
	}
	
	PARAMETER
	{
		name = NewVessel
		type = NewVessel
		title = Launch a new rover
	}
	
	PARAMETER
	{
		name = ReachState
		type = ReachState
		situation = LANDED
	}
	
	PARAMETER
	{
		name = VesselIsType
		type = VesselIsType
		vesselType = Rover
		title = Set vessel type to Rover
	}	
}

