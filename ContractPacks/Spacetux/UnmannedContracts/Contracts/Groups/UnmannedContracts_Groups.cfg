// Credit to tjsnh for his Advanced Progression Contracts.  I got a lot
// of inspiration from his contracts and used a several of his contracts
// as templates for these
// The Advanced Progression Contracts mod is available at:
//   https://kerbalstuff.com/mod/642/Advanced%20Progression%20Contracts
// and is strongly recommended to be used with this mod

// License is CC BY-NC-SA 4.0
// https://creativecommons.org/licenses/by-nc-sa/4.0/

CONTRACT_GROUP
{
//trace = true
	agent = Space Penguins, Inc

	// Name of the contract group
	name = STGUnmannedMissions
	displayName = Unmanned Missions

	// Use this to specify the minimum version of Contract Configurator
	// That is required to run contracts in this group.
	minVersion = 1.15.0

	// The maximum number of times that contracts within this contract
	// group can be completed (0 being unlimited).
	// Default = 0
	// maxCompletions = 3

	// The maximum instances of this contract within this contract group
	// that can be active at one time (0 being unlimited).
	// Default = 0
	maxSimultaneous = 4
	
  	DATA
  	{
  		type = bool
		hidden = true
		
  		homeIsMoon = HomeWorld().IsMoon()
  	}	
	DATA
	{
		type = double
		hidden = true
		requiredValue = false

		sma = @/homeIsMoon? HomeWorld().Parent().SemiMajorAxis() : HomeWorld().SemiMajorAxis()
		outerTargetSMA = @/sma * 1.55
		innerTargetSMA = @/sma * 0.66
	}


	DATA
	{
		type = List<CelestialBody>
		
		hidden = true
		requiredValue = false
		// uniqueValue = true

  		validBodies = AllBodies().Where(cb => (cb.IsPlanet() || cb.IsMoon()) && cb != HomeWorld())
  		unreachedBodies = @/validBodies.ExcludeAll(ReachedBodies())

  
		outerPlanets1 = @/validBodies.Where(cb => (cb.SemiMajorAxis() > @/outerTargetSMA) &&  cb.IsPlanet() )
  		outerMoons = @/validBodies.Where(cb => cb.IsMoon() && cb.Parent().SemiMajorAxis() > @/outerTargetSMA)
  		outerPlanets = @/outerPlanets1.Concat(@/outerMoons)
		
		innerPlanets1 = @/validBodies.Where(cb => (cb.SemiMajorAxis() < @/innerTargetSMA) && cb.IsPlanet())
  		innerMoons = @/validBodies.Where(cb => cb.IsMoon() && cb.Parent().SemiMajorAxis() < @/innerTargetSMA)
  		innerPlanets = @/innerPlanets1.Concat(@/innerMoons)
		

  		easyPlanets1 = @/validBodies.Where(cb => cb == (HomeWorld().IsMoon() ? HomeWorld().Parent() : HomeWorld() ) )
  		easyPlanets2 = @/validBodies.Where(cb => @/homeIsMoon ? cb.Parent() == HomeWorld().Parent() : HomeWorld().Children().Contains(cb))
  		easyPlanets = @/easyPlanets2.Concat(@/easyPlanets1).Exclude(HomeWorld())

  		// If any moon has been reached, then allow contracts for the medium planets
  		mediumPlanets1 = @/validBodies.ExcludeAll(@/innerPlanets).ExcludeAll(@/outerPlanets).ExcludeAll(@/innerMoons).ExcludeAll(@/outerMoons)
  		mediumPlanets =  @/moonsReached ? @/mediumPlanets1 : @/easyPlanets

  		// If any of the medium planets have been reached, then hard planets are the rest of the system
  		hardPlanets=  @/mediumPlanetsReached ? @/validBodies.ExcludeAll(@/easyPlanets).ExcludeAll(@/mediumPlanets) : @/mediumPlanets
		
  	}
  	DATA
  	{
  		type = bool
		hidden = true
		requiredValue = false
// need to fix the following for moons if HomeWorld is also a moon
  		moonsReached = HomeWorld().Children().ExcludeAll(@/unreachedBodies).Count() > 0
  		mediumPlanetsReached = @/validBodies.ExcludeAll(@/innerPlanets).ExcludeAll(@/outerPlanets).ExcludeAll(@/innerMoons).ExcludeAll(@/outerMoons).ExcludeAll(@/unreachedBodies).ExcludeAll(@/easyPlanets).Count() > 0

	}
  	DATA
  	{
  		type = CelestialBody
		hidden = true
		requiredValue = false

 		UnmannedMissionPlanet = Prestige() == Trivial ? @/easyPlanets.Random() : Prestige() == Significant ? @/mediumPlanets.Random() : @/hardPlanets.Random()
 		KolniyaMissionPlanet = Prestige() == Trivial ? @/easyPlanets.Where(cb => cb.CanHaveKolniyaOrbit()).Random() : Prestige() == Significant ? @/mediumPlanets.Where(cb => cb.CanHaveKolniyaOrbit()).Random() : @/hardPlanets.Where(cb => cb.CanHaveKolniyaOrbit()).Random()

 		TundraMissionPlanet = Prestige() == Trivial ? @/easyPlanets.Where(cb => cb.CanHaveTundraOrbit()).Random() : Prestige() == Significant ? @/mediumPlanets.Where(cb => cb.CanHaveTundraOrbit()).Random() : @/hardPlanets.Where(cb => cb.CanHaveTundraOrbit()).Random()


  	}	
	// https://web.archive.org/web/20121014120614/http://kerbalspaceprogram.com/forum/showthread.php/16511-Interplanetary-How-To-Guide
	DATA
	{
		type = double
		hidden = true
		requiredValue = false
		homeworldSemiMajorAxis = @/sma
		destSemiMajorAxis =  @/UnmannedMissionPlanet.IsMoon()? @/UnmannedMissionPlanet.Parent().SemiMajorAxis() :  @/UnmannedMissionPlanet.SemiMajorAxis()
		travelTime = 3.14 * Pow(10,Log(Pow(10,Log(@/homeworldSemiMajorAxis/1000.0 + @/destSemiMajorAxis/1000.0, 10) * 3)/(8.0 * 1167922000),10) / 2)/(3600*6) + 10

		// Gravitational constant of Kerbal (Sun): 1167922000 km3/s2
	}


}
