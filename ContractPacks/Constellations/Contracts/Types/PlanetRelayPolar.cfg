CONTRACT_TYPE
{
	sortKey = h

	name = PlanetRelayPolar
	group = RelayConstellations

	genericTitle = Establish planet polar relays
	title = Establish @/targetBody polar relays
	description = We need a relay around @/targetBody but a typical orbit is impractical due to moons interference. Instead, we propose placing two relays in a high-eccentricity high-inclination orbit, 180Â° phase shifted.

	synopsis = Place two relay satellites in polar orbit around @/targetBody
	genericDescription = Place two relay satellites in polar orbit around the body

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/planet

	rewardScience = 0
	rewardReputation = 1.5 * @RelayConstellations:relayReputation
	rewardFunds = 1.5 * @RelayConstellations:relayFunds
	advanceFunds = @rewardFunds / 2
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = CelestialBody
		planet = ReachedBodies().Where(b => (b.IsPlanet() && !b.HasSurface() && b.Children().Count() >= 3 && (b.Parent() == (HomeWorld().Parent().IsSun() ? HomeWorld().Parent() : HomeWorld().Parent().Parent()) ) )).SelectUnique()

		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE

		title = The target body has to be a reached gas planet in the same solar system with 3+ moons
	}

	DATA
	{
		type = double
		hidden = true
		homeAntennaPower = 200000000000
		homeWorldMaxDistanceFromStar = HomeWorld().Orbit().Apoapsis() + (HomeWorld().Parent().IsSun() ? 0 : HomeWorld().Parent().Orbit().Apoapsis())
		maximumSeparation = @/targetBody.Orbit().Apoapsis() + @homeWorldMaxDistanceFromStar
		requiredAntennaPower = Pow(@maximumSeparation + @/targetBody.SphereOfInfluence(), 2) / @/homeAntennaPower
	}

	DATA
	{
		type = string
		relayA = @/targetBody+" Relay A"
		relayB = @/targetBody+" Relay B"
		markerA = @/targetBody+" Relay Marker A"
		markerB = @/targetBody+" Relay Marker B"
		hidden = true
	}

	DATA
	{
		type = List<string>
		relays = [ @/relayA, @/relayB ]
		names = ["The first relay", "The second relay"]
		markers = [ @/markerA, @/markerB ]
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/relayA
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/relayB
		invertRequirement = true
	}

	DATA
	{
		type = double

		sma = Max(5 * (@/targetBody.Radius() + @/targetBody.AtmosphereAltitude()), 1)
		ecc = 0.75
		Pe = @/sma * (1 - @/ecc) - @/targetBody.Radius()
		Ap = @/sma * (1 + @/ecc) - @/targetBody.Radius()

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 40 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @distCoeff / 4
	}

	DATA
	{
		type = long

		intPe = @/Pe
		intAp = @/Ap
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	REQUIREMENT
	{
		name = Rendezvous
		type = Rendezvous

		targetBody = HomeWorld()
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/sma
				ECC = @/ecc
				INC = 90
				LPE = 270
				LAN = 0
				MNA = 0
				EPH = 0
				REF = 0 // ignored
			}
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/sma
				ECC = @/ecc
				INC = 90
				LPE = 270
				LAN = 0
				MNA = 3.1415926536
				EPH = 0
				REF = 0 // ignored
			}
		}
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = VesselParameterGroup

		title = @/names.ElementAt(@idx)
		define = @/relays.ElementAt(@idx)

		rewardFunds = @RelayConstellations:relayFunds / 5

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @/requiredAntennaPower
			antennaType = RELAY
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = !@Constellations:DEBUG
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			title = Match the orbit with less than @/altThreshold1.ToString("N0") m deviation

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxPeA = @/intPe + @/altThreshold1
			minApA = Max(0, @/intAp - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = 89.9
			maxInclination = 90.1
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the relay within @/kmDistThreshold1.Print() km of the @/markers.ElementAt(@../idx)

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold1

			hideChildren = !@Constellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/relays.ElementAt(@../idx)
			title = Match the orbit with less than @/altThreshold2.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.ToString("N0") m\nTarget apoapsis: @/intAp.ToString("N0") m

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold2)
				maxPeA = @/intPe + @/altThreshold2
				minApA = Max(0, @/intAp - @/altThreshold2)
				maxApA = @/intAp + @/altThreshold2

				minInclination = 89.9
				maxInclination = 90.1

				hideChildren = !@Constellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/relays.ElementAt(@../idx)
			title = Match the orbit with less than @/altThreshold3.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.ToString("N0") m\nTarget apoapsis: @/intAp.ToString("N0") m

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold3)
				maxPeA = @/intPe + @/altThreshold3
				minApA = Max(0, @/intAp - @/altThreshold3)
				maxApA = @/intAp + @/altThreshold3

				minInclination = 89.9
				maxInclination = 90.1

				hideChildren = !@Constellations:DEBUG
			}
		}

		duration = 1d
	}
	
	BEHAVIOUR
	{
		name = DestroyVesselB
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVesselC
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay1
		vessel = @/markers.ElementAt(1)
	}
}