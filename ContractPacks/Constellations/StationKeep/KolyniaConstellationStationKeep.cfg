CONTRACT_TYPE
{
	sortKey = h

	DATA_EXPAND
	{
		type = int
		side = [0, 1]
	}

	name = KolyniaConstellationStationKeep
	group = StationKeepConstellations
	agent = CommTech

	title = Kolynia satellites station-keeping @/directions.ElementAt(@/side)
	description = It's been more than a year since we last verified the positions of the satellites in kolynia orbit. It is normal for a satellite to drift from its target position over time, we ask you to bring the relays back within margins. If a vessel is already in a correct position, you don't have to do anything other that focusing it.

	synopsis = Fix kolynia satellites orbits if necessary

	maxSimultaneous = 1

	completedMessage = Positions verified successfully

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	DATA
	{
		type = double

		inc = 63.4
		sma = Pow((@/targetBody.GM() * Pow(@/targetBody.RotationalPeriod() / 2, 2)) / 39.478417604357432, 0.3333333333333333)
		ecc = (@sma - @/targetBody.Radius() - @/targetBody.AtmosphereAltitude() * 1.14285714286) / @sma
	}

	rewardScience = 0
	rewardReputation = @StationKeepConstellations:stationKeepReputation
	rewardFunds = 6 * @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = At least @StationKeepConstellations:stationKeepCD has passed since the last time the contract was completed.

		contractType = "KolyniaConstellationStationKeep."+@/side
		cooldownDuration = @StationKeepConstellations:stationKeepCD
		minCount = 0
	}

	DATA
	{
		type = double

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		distThreshold3 = @distCoeff * 2

		PeR = @/sma * (1 - @/ecc)
		ApR = @/sma * (1 + @/ecc)
	}

	DATA
	{
		type = long

		intPe = Max(0, Round(@/PeR - @/targetBody.Radius()))
		intAp = Max(0, Round(@/ApR - @/targetBody.Radius()))
		kmDistThreshold3 = Round(@/distThreshold3 / 1000)
	}

	DATA
	{
		type = string
		plane = @/planes.ElementAt(@/side)
		vessel1 = "Kolynia Sat "+@/plane+"1"
		vessel2 = "Kolynia Sat "+@/plane+"2"
		vessel3 = "Kolynia Sat "+@/plane+"3"
		vessel4 = "Kolynia Sat "+@/plane+"4"
		vessel5 = "Kolynia Sat "+@/plane+"5"
		vessel6 = "Kolynia Sat "+@/plane+"6"
		marker1 = "Kolynia Marker "+@/plane+"1"
		marker2 = "Kolynia Marker "+@/plane+"2"
		marker3 = "Kolynia Marker "+@/plane+"3"
		marker4 = "Kolynia Marker "+@/plane+"4"
		marker5 = "Kolynia Marker "+@/plane+"5"
		marker6 = "Kolynia Marker "+@/plane+"6"
	}

	DATA
	{
		type = List<string>
		planes = ["S", "N"]
		directions = ["south", "north"]
		vessels = [ @/vessel1, @/vessel2, @/vessel3, @/vessel4, @/vessel5, @/vessel6 ]
		markers = [ @/marker1, @/marker2, @/marker3, @/marker4, @/marker5, @/marker6 ]
	}

	REQUIREMENT
	{
		name = Established1
		type = ValidVessel
		vessel = @/vessel1
	}
	REQUIREMENT
	{
		name = Established2
		type = ValidVessel
		vessel = @/vessel2
	}
	REQUIREMENT
	{
		name = Established3
		type = ValidVessel
		vessel = @/vessel3
	}
	REQUIREMENT
	{
		name = Established4
		type = ValidVessel
		vessel = @/vessel4
	}
	REQUIREMENT
	{
		name = Established5
		type = ValidVessel
		vessel = @/vessel5
	}
	REQUIREMENT
	{
		name = Established6
		type = ValidVessel
		vessel = @/vessel6
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, @/ecc, @/inc, @/side * 180 + 90, 0 * 120 + 60 * (1 - @/side), 0 * 3.1415926536 + 1.0471975512 * 0, 0], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, @/ecc, @/inc, @/side * 180 + 90, 0 * 120 + 60 * (1 - @/side), 1 * 3.1415926536 + 1.0471975512 * 0, 0], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(2)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, @/ecc, @/inc, @/side * 180 + 90, 1 * 120 + 60 * (1 - @/side), 0 * 3.1415926536 + 1.0471975512 * 1, 0], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(3)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, @/ecc, @/inc, @/side * 180 + 90, 1 * 120 + 60 * (1 - @/side), 1 * 3.1415926536 + 1.0471975512 * 1, 0], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(4)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, @/ecc, @/inc, @/side * 180 + 90, 2 * 120 + 60 * (1 - @/side), 0 * 3.1415926536 + 1.0471975512 * 2, 0], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(5)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, @/ecc, @/inc, @/side * 180 + 90, 2 * 120 + 60 * (1 - @/side), 1 * 3.1415926536 + 1.0471975512 * 2, 0], 1)
		}
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1, 2, 3, 4, 5]
		}
		name = "Sat"+@idx
		type = VesselParameterGroup

		vessel = @/vessels.ElementAt(@idx)

		completedMessage = Position of @/vessels.ElementAt(@idx) verified successfully
		rewardFunds = @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = Max(0, @/inc - 0.1)
			maxInclination = Min(180, @/inc + 0.1)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = "The satellite should be within "+@/kmDistThreshold3.Print()+" km of the "+@/markers.ElementAt(@../idx)
			hideChildren = !@StationKeepConstellations:DEBUG

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold3
		}

		duration = 2s
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/markers.ElementAt(0)
		vessel = @/markers.ElementAt(1)
		vessel = @/markers.ElementAt(2)
		vessel = @/markers.ElementAt(3)
		vessel = @/markers.ElementAt(4)
		vessel = @/markers.ElementAt(5)
	}
}