// Contract for RAD Atmospheric Investigation. 8-12 experiments across up to 4 biomes, flying low and high only.
//   Author: Morphisor

CONTRACT_TYPE
{
    name = RAD_Atmo
    group = RAD
    genericTitle = Perform an atmospheric investigation
    genericDescription = Perform an atmospheric investigation
	
	title = Investigate the atmosphere in several areas on @targetBody
	description = With all this focus on space stuff all around this place you'd almost forget that there's interesting things that are not in space, too! One of the eggheads told us (implored, even) that studying atmospheric phenomena is at least as valuable for our... science program. Or was he talking about the lab's airconditioning.. That might explain why he turned just a little greener than usual. Just be sure, get out there and get some atmospheric data from the skies of @targetBody for us, will you?
	
    synopsis = <color=yellow>Investigate the atmosphere on @targetBody, perform the required experiments. Take note which areas are requested!</color>
    completedMessage = Yeah sorry, it was definitely the airconditioning. We'll file your report somewhere safe, who knows someone may actually look at it within a few years. Or a hundred.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by RAD
    agent = Research Advancement Division

    targetBody = @validBodies.Random()

    // Contract rewards
	advanceFunds = Random(@RAD:Kerbucks025,@RAD:Kerbucks05)
    rewardFunds = @RAD:Kerbucks075
    rewardReputation = Random(2.0, 4.0)

	// Randomly select a possible target body from orbited bodies
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
		hidden = true
	
        validBodies = OrbitedBodies().Where(cb => !cb.IsSun() && cb.HasAtmosphere())
    }

	//Select biome 1
	DATA
    {
		type = Biome
		uniquenessCheck = CONTRACT_ACTIVE
        hidden = true
		
		biome1 = @targetBody.Biomes().Where(b => b.RemainingScience() > 5.0).SelectUnique()
    }

	//Select biome 2
	DATA
    {
		type = Biome
		uniquenessCheck = CONTRACT_ACTIVE
        hidden = true
		
		biome2 = @targetBody.Biomes().Where(b => b.RemainingScience() > 5.0 && !b.Name() == @biome1.Name()).SelectUnique()
    }
	
	//Select biome 3
	DATA
    {
		type = Biome
		uniquenessCheck = CONTRACT_ACTIVE
        hidden = true
		
		biome3 = @targetBody.Biomes().Where(b => b.RemainingScience() > 5.0 && !b.Name() == @biome1.Name() && !b.Name() == @biome2.Name()).SelectUnique()
    }
	
    // Exclusion list of experiments, select 8-12 types
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(8,12)
    }
	
	// Biome 1: Mission activates only for science that has not yet been done
    DATA
    {
		type = List<ScienceSubject>
		title = SubjectsList1
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBiomeExperiment([@biome1], @experiments1)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == FlyingHigh || s.Situation() == FlyingLow)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.CollectedScience() == 0.0)
		
		scienceSubjects1 = @scienceSubjectsTemp3.Random(2,3)
    }

	// Biome 2: Mission activates only for science that has not yet been done
    DATA
    {
		type = List<ScienceSubject>
		title = SubjectsList2
		hidden = true
	
		scienceSubjectsTemp4 = AllScienceSubjectsByBiomeExperiment([@biome2], @experiments1)
		scienceSubjectsTemp5 = @scienceSubjectsTemp4.Where(s => s.Situation() == FlyingHigh || s.Situation() == FlyingLow)
		scienceSubjectsTemp6 = @scienceSubjectsTemp5.Where(s => s.CollectedScience() == 0.0)
		
		scienceSubjects2 = @scienceSubjectsTemp6.Random(2,3)
    }
	
	// Biome 3: Mission activates only for science that has not yet been done
    DATA
    {
		type = List<ScienceSubject>
		title = SubjectsList2
		hidden = true
	
		scienceSubjectsTemp7 = AllScienceSubjectsByBiomeExperiment([@biome3], @experiments1)
		scienceSubjectsTemp8 = @scienceSubjectsTemp7.Where(s => s.Situation() == FlyingHigh || s.Situation() == FlyingLow)
		scienceSubjectsTemp9 = @scienceSubjectsTemp8.Where(s => s.CollectedScience() == 0.0)
		
		scienceSubjects3 = @scienceSubjectsTemp9.Random(2,3)
    }
	
    REQUIREMENT
    {
        type = Expression
        expression = @/scienceSubjects1.Count() >= 2

        title = Must have enough science to do in the first area
    }
	
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceSubjects2.Count() >= 2

        title = Must also have enough science to do in the second area
    }
	
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceSubjects3.Count() >= 2

        title = Must also have enough science to do in the third area
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = RecoverOrTransmit
    }

	PARAMETER
	{
		name = CollectScience1
		type = CollectScience
		title = Do science here

		biome = @scienceSubject1.Biome()
		situation = @scienceSubject1.Situation()
		experiment = @scienceSubject1.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(5000.0, 8000.0)
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject1 = @/scienceSubjects1
        }
	}

	PARAMETER
	{
		name = CollectScience2
		type = CollectScience
		title = Also do science there

		biome = @scienceSubject2.Biome()
		situation = @scienceSubject2.Situation()
		experiment = @scienceSubject2.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(5000.0, 8000.0)
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject2 = @/scienceSubjects2
        }
	}

	PARAMETER
	{
		name = CollectScience2
		type = CollectScience
		title = More science to do here

		biome = @scienceSubject3.Biome()
		situation = @scienceSubject3.Situation()
		experiment = @scienceSubject3.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(5000.0, 8000.0)
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject3 = @/scienceSubjects3
        }
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
}
