// Contract for RAD Orbital biome observation. 6-12 experiments across 2 biomes, low and high space only.
//   Author: Morphisor

CONTRACT_TYPE
{
    name = RAD_BiomeObs
    group = RAD
    genericTitle = Perform an orbital biome observation
    genericDescription = Perform an orbital biome observation
	
	title = Observe @biome1 and @biome2 from space
	description = We've taken an interest in certain areas on @targetBody. Purely scientifically, of course. We'd like you to investigate @biome1 and @biome2. Don't get too close however, that would be suspici-... harmful for the data we require. So best you do this from orbit. Yes do stay up there, far away, that'll be quite enough. Off you go, shoo.
	
    synopsis = <color=yellow>Send a craft into space around @targetBody, taking extra care to make sure your orbit crosses the required areas and perform the required experiments.</color>
    completedMessage = Good, good, that's some excellent intel *ahem* scientific data you've gathered. We'll take it from here!

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by RAD
    agent = Research Advancement Division

    targetBody = @validBodies.Random()

    // Contract rewards
	advanceFunds = Random(@RAD:Kerbucks025,@RAD:Kerbucks05)
    rewardFunds = @RAD:Kerbucks05
    rewardReputation = Random(2.0, 4.0)

	// Randomly select a possible target body from reached bodies
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
		hidden = true
	
        validBodies = ReachedBodies().Where(cb => !cb.IsSun())
    }

	//Select biome 1
	DATA
    {
		type = Biome
		uniquenessCheck = CONTRACT_ACTIVE
        hidden = true
		
		biome1 = @targetBody.Biomes().Where(b => b.RemainingScience() > 10.0).SelectUnique()
    }

	//Select biome 2
	DATA
    {
		type = Biome
		uniquenessCheck = CONTRACT_ACTIVE
        hidden = true
		
		biome2 = @targetBody.Biomes().Where(b => b.RemainingScience() > 10.0 && !b.Name() == @biome1.Name()).SelectUnique()
    }
	
    // Exclusion list of experiments, select 8-12 types
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(8,12)
    }
	
	// Biome 1: Mission activates only for science that has not yet been done
    DATA
    {
		type = List<ScienceSubject>
		title = SubjectsList1
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBiomeExperiment([@biome1], @experiments1)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.CollectedScience() == 0.0)
		
		scienceSubjects1 = @scienceSubjectsTemp3.Random(3,4)
    }

	// Biome 1: Mission activates only for science that has not yet been done
    DATA
    {
		type = List<ScienceSubject>
		title = SubjectsList1
        hidden = true

        scienceSubjectsTemp4 = AllScienceSubjectsByBiomeExperiment([@biome2], @experiments1)
		scienceSubjectsTemp5 = @scienceSubjectsTemp4.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh)
		scienceSubjectsTemp6 = @scienceSubjectsTemp5.Where(s => s.CollectedScience() == 0.0)
		
		scienceSubjects2 = @scienceSubjectsTemp6.Random(3,4)
    }
	
    REQUIREMENT
    {
        type = Expression
        expression = @/scienceSubjects1.Count() >= 3

        title = Must have enough science to do in the first area
    }
	
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceSubjects2.Count() >= 3

        title = Must also have enough science to do in the second area
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = RecoverOrTransmit
    }

	PARAMETER
	{
		name = CollectScience1
		type = CollectScience
		title = Do science here

		biome = @scienceSubject1.Biome()
		situation = @scienceSubject1.Situation()
		experiment = @scienceSubject1.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(4000.0, 8000.0)
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject1 = @/scienceSubjects1
        }
	}

	PARAMETER
	{
		name = CollectScience2
		type = CollectScience
		title = Also do science there

		biome = @scienceSubject2.Biome()
		situation = @scienceSubject2.Situation()
		experiment = @scienceSubject2.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(4000.0, 8000.0)
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject2 = @/scienceSubjects2
        }
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
}
